var colorPickerTemplates=colorPickerTemplates||{};colorPickerTemplates["modal-template-hsl.html"]=' <ion-modal-view class="color-picker-modal" ng-class="::ui.modalClass">\n    \n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n    \n    <ion-content>\n\n    <div>\n        <div class="item item-body text-center" style="height:200px;" color-box="{{ui.sample}}">\n        <button class="button button-outline" style="margin:auto; margin-top:100px;" color-box="{{ui.sample}}" ng-click="setColor()">{{::ui.okButton}}</button>\n        </div>\n    </div>\n\n    \n\n    <div>\n        \n        \n        <div class="item range range-positive">\n            <i class="icon em1">H</i>\n            <input type="range" ng-model="internalColors.hsl.h" min="0" max="360">\n            <span><input parse-integer type="number" min="0" max="360"  class="em1" ng-model="internalColors.hsl.h"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">S %</i>\n            <input type="range" ng-model="internalColors.hsl.s" min="0" max="100">\n            <span><input parse-integer type="number" min="0" max="100"  class="em1" ng-model="internalColors.hsl.s"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">L %</i>\n            <input type="range" ng-model="internalColors.hsl.l" min="0" max="100">\n            <span><input parse-integer type="number" min="0" max="100"  class="em1" ng-model="internalColors.hsl.l"></span>\n        </div>\n   \n        \n\n    </div>\n\n    \n      \n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n    <button class="button button-stable" ng-click="closeModal()">{{::ui.cancelButton}}</button>\n    <button ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetColor()">{{::ui.resetButton}}</button>\n    </ion-footer-bar>\n</ion-modal-view>\n';var colorPickerTemplates=colorPickerTemplates||{};colorPickerTemplates["modal-template-hsv.html"]='<ion-modal-view class="color-picker-modal" ng-class="::ui.modalClass">    \n\n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n    <ion-content>\n\n    <div>\n        <div class="item item-body text-center" style="height:200px;" color-box="{{ui.sample}}">\n        <button class="button button-outline" style="margin:auto; margin-top:100px;" color-box="{{ui.sample}}" ng-click="setColor()">{{::ui.okButton}}</button>\n        </div>\n    </div>\n\n    \n    <div>\n        <div class="item range range-positive">\n            <i class="icon em1">H</i>\n            <input type="range" ng-model="internalColors.hsv.h" min="0" max="360">\n                <span><input parse-integer type="number" min="0" max="360"  class="em1" ng-model="internalColors.hsv.h"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">S %</i>\n            <input type="range" ng-model="internalColors.hsv.s" min="0" max="100">\n            <span><input parse-integer type="number" min="0" max="100"  class="em1" ng-model="internalColors.hsv.s"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">V %</i>\n            <input type="range" ng-model="internalColors.hsv.v" min="0" max="100">\n            <span><input parse-integer type="number" min="0" max="100"  class="em1" ng-model="internalColors.hsv.v"></span>\n        </div>\n    </div>\n      \n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button class="button button-stable" ng-click="closeModal()">{{::ui.cancelButton}}</button>\n        <button ng-if="!ui.hideReset" class="button button-stable" ng-click="unsetColor()">{{::ui.resetButton}}</button>\n    </ion-footer-bar>\n  </ion-modal-view>\n';var colorPickerTemplates=colorPickerTemplates||{};colorPickerTemplates["modal-template-name.html"]=' <ion-modal-view class="color-picker-modal" ng-class="::ui.modalClass">\n    <ion-header-bar ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n    <ion-content>\n\n    <div ng-if="!ui.shortColorList">\n        <div class="text-center" ng-if="!showList" style="padding-top:40px;">\n            <h4 class="muted">{{::ui.loadListMessage}}</h4>\n            <p>\n                <ion-spinner></ion-spinner>\n            </p>\n        </div>\n        <div class="list" ng-if="showList" class="animate-if">\n            <div class="item item-text-wrap" collection-repeat="col in ui.namedColorsAsList track by $index" color-box="{{col[1]}}" color-box-no-border="true" ng-click="setColor(col[0])">\n            <h2 color-box="{{col[1]}}">{{col[0]}}</h2>\n            <p color-box="{{col[1]}}">{{col[1]}}</p>\n            </div>\n        </div>\n    </div>\n    <div ng-if="ui.shortColorList">\n        <div class="list">\n            <div class="item item-text-wrap" ng-repeat="col in ui.namedColorsAsList track by $index" color-box="{{::col[1]}}" color-box-no-border="true" ng-click="setColor(col[0])">\n            <h2 color-box="{{::col[1]}}">{{::col[0]}}</h2>\n            <p color-box="{{::col[1]}}">{{::col[1]}}</p>\n            </div>\n        </div>\n    </div>\n      \n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button class="button button-stable" ng-click="closeModal()">{{ui.cancelButton}}</button>\n        <button ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetColor()">{{ui.resetButton}}</button>\n    </ion-footer-bar>\n</ion-modal-view>';var colorPickerTemplates=colorPickerTemplates||{};colorPickerTemplates["modal-template-rgb.html"]=' <ion-modal-view class="color-picker-modal" ng-class="::ui.modalClass">\n    <ion-header-bar class="bar" ng-class="::ui.headerFooterClass">\n      <h1 class="title">{{::ui.modalTitle}}</h1>\n    </ion-header-bar>\n    <ion-content>\n\n    <div>\n        <div class="item item-body text-center" style="height:200px;" color-box="{{ui.sample}}">\n        <button class="button button-outline" style="margin:auto; margin-top:100px;" color-box="{{ui.sample}}" ng-click="setColor()">{{::ui.okButton}}</button>\n        </div>\n    </div>\n\n    <div>\n    \n        <div class="item range range-positive">\n            <i class="icon em1">R</i>\n            <input type="range" ng-model="internalColors.rgb.r" min="0" max="255">\n            <span><input parse-integer type="number" min="0" max="255"  class="em1" ng-model="internalColors.rgb.r"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">G</i>\n            <input type="range" ng-model="internalColors.rgb.g" min="0" max="255">\n            <span><input parse-integer type="number" min="0" max="255"  class="em1" ng-model="internalColors.rgb.g"></span>\n        </div>\n        <div class="item range range-positive">\n            <i class="icon em1">B</i>\n            <input type="range" ng-model="internalColors.rgb.b" min="0" max="255">\n            <span><input parse-integer type="number" min="0" max="255" class="em1" ng-model="internalColors.rgb.b"></span>\n        </div>\n\n\n    </div> \n    \n \n    </ion-content>\n    <ion-footer-bar ng-class="::ui.headerFooterClass">\n        <button class="button button-stable" ng-click="closeModal()">{{::ui.cancelButton}}</button>\n        <button ng-if="::!ui.hideReset" class="button button-stable" ng-click="unsetColor()">{{::ui.resetButton}}</button>\n    </ion-footer-bar>\n  </ion-modal-view>\n',function(){angular.module("ionic-color-picker",[]).directive("parseInteger",[function(){return{restrict:"A",require:"ngModel",priority:1e3,link:function(scope,iElement,iAttrs,modelCtrl){modelCtrl.$formatters.push(function(modelValue){return parseInt(modelValue)})}}}]).directive("colorBox",[function(){return{restrict:"A",scope:!0,link:function(scope,iElement,iAttrs){var pristines={backgroundColor:iElement.css("background-color"),color:iElement.css("color"),borderColor:iElement.css("border-color")},modelMode=iAttrs.modelMode||"hex",strokeColors=iAttrs.availableStrokeColors?iAttrs.availableStrokeColors.split(","):["#ffffff","#000000"],colorNames=iAttrs.namedColors?scope.$eval(iAttrs.namedColors):tinycolor.names,colorNamesInverted={};angular.forEach(colorNames,function(v,k){var v2=0==v.indexOf("#")?v:"#"+v;v2=tinycolor(v2).toHexString(),colorNamesInverted[v2]=k});var tColor,txt;iAttrs.$observe("colorBox",function(nv){if(!nv)return iElement.css("background-color",pristines.backgroundColor),iElement.css("color",pristines.color),void iElement.css("border-color",pristines.borderColor);if("name"==modelMode)nv=colorNames[nv],nv=0==nv.indexOf("#")?nv:"#"+nv,tColor=tinycolor(nv);else if("hex"==modelMode)nv=0==nv.indexOf("#")?nv:"#"+nv,tColor=tinycolor(nv);else try{nv=scope.$eval(nv),tColor=tinycolor.fromRatio(nv)}catch(err){return}txt=tinycolor.mostReadable(tColor,strokeColors).toHexString(),"true"!==iAttrs.colorBoxNoBorder&&iElement.css("border-color",txt),"true"!==iAttrs.colorBoxNoText&&iElement.css("color",txt),iElement.css("background-color",tColor.toHexString())})}}}]).directive("colorPicker",["$ionicModal","$timeout",function($ionicModal,$timeout){return{restrict:"A",require:"ngModel",scope:!0,link:function(scope,iElement,iAttrs,ngModelController){var colorMode=iAttrs.colorMode||"rgb",customColors=void 0!==iAttrs.namedColors,colorNames=iAttrs.namedColors?scope.$eval(iAttrs.namedColors):tinycolor.names,colorNamesInverted={},shortListBreak=iAttrs.shortListBreak?parseInt(iAttrs.shortListBreak):10,modelMode=iAttrs.modelMode||"hex";angular.forEach(colorNames,function(v,k){var v2=0==v.indexOf("#")?v:"#"+v;v2=tinycolor(v2).toHexString(),colorNamesInverted[v2]=k}),scope.internalColors={rgb:{r:0,g:0,b:0},hsl:{h:0,s:0,l:0},hsv:{h:0,s:0,v:0},hex:"#000000"},scope.ui={modalTitle:iAttrs.modalTitle||"Pick a color",okButton:iAttrs.okButton||"OK",hideReset:"true"!==iAttrs.hideReset?!1:!0,resetButton:iAttrs.resetButton||"Reset",cancelButton:iAttrs.cancelButton||"Cancel",loadListMessage:iAttrs.loadListMessage||"Loading",modalClass:iAttrs.modalClass||"",headerFooterClass:iAttrs.headerFooterClass||"bar-stable",mode:colorMode,selectMode:"sliders",namedColors:colorNames,namedColorsAsList:[]};for(var key in scope.ui.namedColors){var k=scope.ui.namedColors[key];k=0==k.indexOf("#")?k:"#"+k,scope.ui.namedColorsAsList.push([key,k])}var shortList=scope.ui.namedColorsAsList.length<shortListBreak;scope.ui.shortColorList=shortList;var getScopeColor=function(c){return"rgb"==colorMode?c.toRgb():"hsl"==colorMode?c.toHsl():"hsv"==colorMode?c.toHsv():void 0};$timeout(function(){var initial=ngModelController.$viewValue;initial&&(customColors?c=tinycolor(colorNames[initial]):c=tinycolor(initial),scope.internalColors[colorMode]=getScopeColor(c))}),scope.unsetColor=function(){$timeout(function(){ngModelController.$setViewValue(""),scope.modal.hide(),scope.showList=!1})};var setColorTo=function(col,fun){ngModelController.$setViewValue(col[fun]())},setColorToName=function(col){var theCol=colorNamesInverted[col.toHexString()];return theCol?void ngModelController.$setViewValue(colorNamesInverted[col.toHexString()]):void console.error("cannot set color",col)};scope.setColor=function(col){switch(col="name"==colorMode?tinycolor(scope.ui.namedColors[col]):tinycolor(getCurrentColorModel()),modelMode){case"name":setColorToName(col);break;case"rgb":setColorTo(col,"toRgb");break;default:setColorTo(col,"toHexString")}scope.modal.hide(),scope.showList=!1},scope.closeModal=function(){scope.modal.hide(),scope.showList=!1;var v=ngModelController.$viewValue;v&&(v=tinycolor(v),scope.internalColors[colorMode]=getScopeColor(v))},scope.toggleSelectMode=function(){scope.ui.selectMode="sliders"==scope.ui.selectMode?"form":"sliders"};var tplName="modal-template-"+scope.ui.mode+".html";scope.modal=$ionicModal.fromTemplate(colorPickerTemplates[tplName],{scope:scope}),scope.$on("$destroy",function(){scope.modal.remove()}),iElement.on("click",function(){shortList?(scope.showList=!0,scope.modal.show()):scope.modal.show().then(function(){scope.showList=!0})});var getCurrentColorModel=function(){if("hex"!=colorMode){var out={};return angular.forEach(scope.internalColors[colorMode],function(v,k){out[k]=parseFloat(v)}),out}return scope.internalColors[colorMode]};scope.$watch(function(){return getCurrentColorModel()},function(nv){nv&&(scope.ui.sample=tinycolor(nv).toHexString())},!0)}}}])}();